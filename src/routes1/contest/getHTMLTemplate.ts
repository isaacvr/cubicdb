import type { SCRAMBLE_MENU } from "@constants";
import { map } from "@helpers/math";
import { localLang } from "@stores/language.service";
import { version } from "@stores/version.store";

import moment from "moment";
import { get } from "svelte/store";

type MODE = SCRAMBLE_MENU["1"][number];

interface SCRAMBLE_SETTINGS {
  scrambles: number;
  extras: number;
  factor: number;
}

interface GET_HTML_PARAMS {
  contestName: string;
  name: string;
  mode: MODE;
  scr: string[];
  pages: string[][];
  FRS: number[];
  round: number;
  settings: SCRAMBLE_SETTINGS;
  SCRAMBLES_PER_PAGE: number;
  CHM: number[];
  CW: number;
}

function getImageString(img: string, FR: number): string {
  // <img src="${}" style="height: ${FR}cm;">
  if (img.includes("<svg")) {
    const parts = img.split("<svg");
    const W = img.match(/width="(\d+(\.\d+)?)"/);
    const H = img.match(/height="(\d+(\.\d+)?)"/);

    if (!W || !H) return img;

    const NW = (+W[1] / +H[1]) * FR;

    return parts[0] + '<svg style="width: ' + NW + "cm; height: " + FR + 'cm;" ' + parts[1];
  }

  return img;
}

function regularHTML({
  contestName,
  name,
  mode,
  scr,
  pages,
  FRS,
  round,
  settings,
  SCRAMBLES_PER_PAGE,
  CHM,
  CW,
}: GET_HTML_PARAMS) {
  const lLang = get(localLang).CONTEST;

  return `<!DOCTYPE html>
  <html>
  <body style="position: relative;">
    ${pages
      .map(
        (pImgs, p1) => `<div class="page">
        <h1 style="text-align: center; margin: 0; font-size: 1.2rem;">${contestName}</h1>
        <div style="display: grid; grid-template-columns: 1fr 1fr 1fr;">
        <p>${moment().format("DD/MM/YYYY")}</p>
        <p style="text-align: center;">${name} ${lLang.round} ${round}</p>
        <p> </p>
        </div>
        <table>
          ${pImgs
            .map(
              (img, p2) => `
              ${
                p2 + settings.extras === pImgs.length
                  ? `<tr><td colspan="3" style="text-align: center;"><h3 style="margin: 0;">${lLang.extraScrambles}</h3></td></tr>`
                  : ""
              }
              <tr>
                <td style="width: 20px; padding-inline: 16px; text-align: center;">
                  ${
                    p2 + settings.extras >= pImgs.length
                      ? "E" + (p2 - pImgs.length + 3)
                      : p1 * SCRAMBLES_PER_PAGE + p2 + 1
                  }
                </td>
                <td>
                  <div class="scramble">
                    ${scr[p2]
                      .replace(/<br>/g, "")
                      .split(/\s+/)
                      .reduce(
                        (acc, p, i) => [
                          ...acc,
                          ...(p + " ".repeat(Math.max(CHM[i % CHM.length] - p.length, 1))).split(
                            ""
                          ),
                        ],
                        [] as string[]
                      )
                      .map(
                        (s, i) =>
                          `<span class="${~~(i / CW) % 2 === 0 ? "" : "bg-gray"}">${s}</span>`
                      )
                      .join("")}
                  </div>
                </td>
                <td style="width: 0cm; padding: 1mm;">${getImageString(img, FRS[p1])}</td>
              </tr>
            `
            )
            .join(" ")}
        </table>

        <p style="text-align:center;display:flex;width:fit-content;gap:.5rem;align-items:center;margin-inline:auto;">
          Generated by CubicDB v${get(version)}

          <svg style="width: 0.6cm; margin-top: 0.15cm;" id="Capa_1" data-name="Capa 1" xmlns="http://www.w3.org/2000/svg" viewBox="245 300 840 960"><defs><style>.cls-1{fill:#9aa1e5;}.cls-2{fill:#020202;}</style></defs><rect class="cls-1" x="432.71" y="516.58" width="400.38" height="437.42"/><path class="cls-2" d="M603.92,769H304.71c-31,0-56.31-28.73-56.31-64V369c0-35.31,25.26-64,56.31-64H423.82c31.05,0,56.32,28.72,56.32,64v43.13H433.28V369c0-5.93-4.24-10.75-9.46-10.75H304.71c-5.21,0-9.46,4.82-9.46,10.75V705c0,5.93,4.25,10.76,9.46,10.76H603.92c5.22,0,9.46-4.83,9.46-10.76V578.82c0-5.93-4.24-10.75-9.46-10.75H477.75V680.9H430.89V514.79h173c31.06,0,56.32,28.73,56.32,64V705C660.24,740.28,635,769,603.92,769Z"/></svg>
        </p> 
      </div>`
      )
      .join("")}
  </body>
  <style>
    * { font-family: system-ui, "Arial";}
    table, th, td { border: 1px solid black; border-collapse: collapse; width: 100%; margin: 0; padding: 0;}
    .scramble { display: grid; grid-template-columns: repeat(${CW}, 1fr); padding-inline: 1rem; }
    .scramble span { font-size: ${map(mode[1] === "sqrs" ? 40 : CW, 30, 48, 1.2, 0.85)}rem; }
    .scramble span.bg-gray { background: #ededff; }
    p { margin: 0; }
  </style>
</html>`;
}

function fmcHTML({ contestName, name, round, pages, scr }: GET_HTML_PARAMS) {
  const lLang = get(localLang);
  const contestLang = get(localLang).CONTEST;

  return `<!DOCTYPE html>
<html>
  <body>
    <div class="page">
      <div class="info">
        <h1>Fewest Moves</h1>
        <ul>
          ${contestLang.fmcRules.map(rule => `<li>${rule}</li>`).join(" ")}
        </ul>

        <table>
          <tr>
            <th>${contestLang.faceMoves}</th>
            ${"<th></th>".repeat(6)}
          </tr>
          <tr> <td>${
            contestLang.clockwise
          }</td> <td>R</td> <td>U</td> <td>F</td> <td>L</td> <td>D</td> <td>B</td> </tr>
          <tr> <td>${
            contestLang.counterClockwise
          }</td> <td>R'</td> <td>U'</td> <td>F'</td> <td>L'</td> <td>D'</td> <td>B'</td></tr>
          <tr> <td>${
            contestLang.double
          }</td> <td>R2</td> <td>U2</td> <td>F2</td> <td>L2</td> <td>D2</td> <td>B2</td></tr>

          <tr>
            <th>${contestLang.rotations}</th>
            ${"<th></th>".repeat(6)}
          </tr>

          <tr><td>${
            contestLang.clockwise
          }</td><td>x</td><td>y</td><td>z</td><td></td><td></td><td></td></tr>
          <tr><td>${
            contestLang.counterClockwise
          }</td><td>x'</td><td>y'</td><td>z'</td><td></td><td></td><td></td></tr>
          <tr><td>${
            contestLang.double
          }</td><td>x2</td><td>y2</td><td>z2</td><td></td><td></td><td></td></tr>
        </table>
      </div>

      <div class="competidor-info">
        <div class="contest">
          <p>${contestName}</p>
          <p>${name} ${contestLang.rounds} ${round}</p>
          <span>${contestLang.competitor}: ______________________</span>
          <span>${contestLang.ccaID}: __ __ __ __ __ __ __ __</span>
          <span>${contestLang.registrantID}: _______</span>
        </div>
        <div class="result"> <span>${contestLang.doNotFillWarning}</span> <span>${
          contestLang.gradedBy
        }: __________________ ${contestLang.result}: ______</span> </div>
        <div class="image"> ${pages[0][0]} </div>
      </div>

      <div class="scramble"> <span>${lLang.global.scramble}</span> <span>${scr[0]}</span> </div>

      <div class="solution"> ${"<div></div>".repeat(80)} </div>

      <div class="cubicdb" style="text-align: center;display: flex;gap: 0.5rem;align-items: center;margin-inline: auto;">
        Generated by CubicDB v2.1.3

        <svg style="width: 0.6cm" id="Capa_1" data-name="Capa 1" xmlns="http://www.w3.org/2000/svg" viewBox="245 300 840 960">
          <defs> <style> .cls-1 { fill: #9aa1e5; } .cls-2 { fill: #020202; } </style> </defs>
          <rect class="cls-1" x="432.71" y="516.58" width="400.38" height="437.42" />
          <path class="cls-2" d="M603.92,769H304.71c-31,0-56.31-28.73-56.31-64V369c0-35.31,25.26-64,56.31-64H423.82c31.05,0,56.32,28.72,56.32,64v43.13H433.28V369c0-5.93-4.24-10.75-9.46-10.75H304.71c-5.21,0-9.46,4.82-9.46,10.75V705c0,5.93,4.25,10.76,9.46,10.76H603.92c5.22,0,9.46-4.83,9.46-10.76V578.82c0-5.93-4.24-10.75-9.46-10.75H477.75V680.9H430.89V514.79h173c31.06,0,56.32,28.73,56.32,64V705C660.24,740.28,635,769,603.92,769Z" />
        </svg>
      </div>
    </div>
  </body>
  <style>
    * { font-family: system-ui, "Arial"; box-sizing: border-box; }
    body { height: 25.7cm; width: 100%; margin: 0; padding-right: 1px; }
    .page {
      width: 100%;
      height: 100%;
      display: grid;
      grid-template-areas:
        "info competidorInfo"
        "scramble scramble"
        "solution solution"
        "cubicdb cubicdb";
      grid-template-columns: 3fr 2fr;
      grid-template-rows: 10fr 1fr 10fr 1fr;
    }
    .info { grid-area: info; border: 1px solid black; border-top: none;}
    .info h1 {margin: 0;text-align: center;font-weight: normal;}
    .info ul {padding: 0;padding-left: 0.5cm;list-style: none;}
    .info ul li { position: relative; font-size: 0.39cm;}
    .info ul li::before {content: " ";background-color: black;width: 0.1cm;height: 0.1cm;position: absolute;left: -0.27cm;top: 0.25cm;border-radius: 50%;}
    .info table {width: 100%;padding-inline: 1cm;font-size: 0.39cm;}
    .competidor-info {grid-area: competidorInfo;display: grid;font-size: 0.36cm;}
    .competidor-info > *:nth-child(1),
    .competidor-info > *:nth-child(2) {border: 1px solid black;border-top: none;border-left: none;padding: 0.2cm;text-align: center;}
    .competidor-info .contest {display: grid;}
    .competidor-info .contest p {margin: 0;}
    .competidor-info .contest span {text-align: left;margin-top: 3mm;}
    .competidor-info .result {display: grid;font-size: 0.34cm;}
    .competidor-info .image {border-right: 1px solid black;}
    .competidor-info .image svg {width: 100% !important;height: 100% !important;object-fit: contain;padding: 0.3cm;}
    .scramble {grid-area: scramble;padding-block: 0.2cm;text-align: center;font-size: 2.6cqi;border-inline: 1px solid black;display: grid;}
    .scramble span:first-child {font-size: .35cm;}
    .scramble span:last-child {font-size: .55cm;font-weight: 600;}
    .solution {grid-area: solution;display: grid;grid-template-columns: repeat(10, 1fr);padding: 1cm;gap: 1cm;border: 1px solid black;}
    .solution > div {border-bottom: 1px solid black;}
    .cubicdb {grid-area: cubicdb;}
  </style>
</html>
`;
}

export function getHTMLTemplate(params: GET_HTML_PARAMS): string {
  if (params.mode[1] === "333fm") return fmcHTML(params);
  return regularHTML(params);
}
